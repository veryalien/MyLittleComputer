DESIGN NOTES

--------------------------------------------------------------------------------

USER EXTENDED INSTRUCTIONS X00-X99

EXT 01 USB    - use B register instead of A in next instruction only
EXT 02 MUL    - multiply    A=A*B
EXT 03 DIV    - divide      A=A/B
-- NOT DONE YET
EXT 04 REM    - remainder   A=A%B
EXT 05 SHL    - shift left  A >>= 1
EXT 06 SHR    - shift right A <<= 1
EXT 07 ASL    - arithmetic shift left (multiply by two, sign preserved)
EXT 08 ASR    - arithmetic shift right (divide by two, sign preserved)
EXT 09..9999  - reserved for other extended instructions


--------------------------------------------------------------------------------

HALT CODES

HLT 00       = HLT
HLT01..99    = user halts, for os calls


--------------------------------------------------------------------------------

HARDWARE ACCESS (IO)

IO 01          901           INP
IO 02          902           OUT
IO 00,H03..H99 900,903..999  reserved for other hardware access such as GPIO


--------------------------------------------------------------------------------

LIBRARY ROUTINES

It would be nice for the multiply and divide to also be possible as a library
routine that you just call and return.

This means the following
- need a convention that allows call and return to be implemented,
i.e. either a single level stack in memory, or a multi level stack.

- need a librarian, to allow this code to be compiled into a named library
with a named routine name

- need a linker, to allow library functions to be linked in and their
addresses resolved.


END.
